#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Armazon
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Armazon")]
	public partial class ArmazonDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertVendido(Vendido instance);
    partial void UpdateVendido(Vendido instance);
    partial void DeleteVendido(Vendido instance);
    partial void InsertCarrito(Carrito instance);
    partial void UpdateCarrito(Carrito instance);
    partial void DeleteCarrito(Carrito instance);
    partial void InsertCategoria(Categoria instance);
    partial void UpdateCategoria(Categoria instance);
    partial void DeleteCategoria(Categoria instance);
    partial void InsertImagen(Imagen instance);
    partial void UpdateImagen(Imagen instance);
    partial void DeleteImagen(Imagen instance);
    partial void InsertMetodoDePago(MetodoDePago instance);
    partial void UpdateMetodoDePago(MetodoDePago instance);
    partial void DeleteMetodoDePago(MetodoDePago instance);
    partial void InsertProducto(Producto instance);
    partial void UpdateProducto(Producto instance);
    partial void DeleteProducto(Producto instance);
    partial void InsertProducto_Carrito(Producto_Carrito instance);
    partial void UpdateProducto_Carrito(Producto_Carrito instance);
    partial void DeleteProducto_Carrito(Producto_Carrito instance);
    partial void InsertProducto_Tag(Producto_Tag instance);
    partial void UpdateProducto_Tag(Producto_Tag instance);
    partial void DeleteProducto_Tag(Producto_Tag instance);
    partial void InsertProducto_Usuario(Producto_Usuario instance);
    partial void UpdateProducto_Usuario(Producto_Usuario instance);
    partial void DeleteProducto_Usuario(Producto_Usuario instance);
    partial void InsertPropiedad(Propiedad instance);
    partial void UpdatePropiedad(Propiedad instance);
    partial void DeletePropiedad(Propiedad instance);
    partial void InsertSubCategoria(SubCategoria instance);
    partial void UpdateSubCategoria(SubCategoria instance);
    partial void DeleteSubCategoria(SubCategoria instance);
    partial void InsertSubCategoria_Propiedad(SubCategoria_Propiedad instance);
    partial void UpdateSubCategoria_Propiedad(SubCategoria_Propiedad instance);
    partial void DeleteSubCategoria_Propiedad(SubCategoria_Propiedad instance);
    partial void InsertSucursal(Sucursal instance);
    partial void UpdateSucursal(Sucursal instance);
    partial void DeleteSucursal(Sucursal instance);
    partial void InsertTag(Tag instance);
    partial void UpdateTag(Tag instance);
    partial void DeleteTag(Tag instance);
    partial void InsertTienda(Tienda instance);
    partial void UpdateTienda(Tienda instance);
    partial void DeleteTienda(Tienda instance);
    partial void InsertUsuario(Usuario instance);
    partial void UpdateUsuario(Usuario instance);
    partial void DeleteUsuario(Usuario instance);
    partial void InsertValor(Valor instance);
    partial void UpdateValor(Valor instance);
    partial void DeleteValor(Valor instance);
    #endregion
		
		public ArmazonDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ArmazonConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ArmazonDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ArmazonDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ArmazonDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ArmazonDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Vendido> Vendidos
		{
			get
			{
				return this.GetTable<Vendido>();
			}
		}
		
		public System.Data.Linq.Table<Carrito> Carritos
		{
			get
			{
				return this.GetTable<Carrito>();
			}
		}
		
		public System.Data.Linq.Table<Categoria> Categorias
		{
			get
			{
				return this.GetTable<Categoria>();
			}
		}
		
		public System.Data.Linq.Table<Imagen> Imagens
		{
			get
			{
				return this.GetTable<Imagen>();
			}
		}
		
		public System.Data.Linq.Table<MetodoDePago> MetodoDePagos
		{
			get
			{
				return this.GetTable<MetodoDePago>();
			}
		}
		
		public System.Data.Linq.Table<Producto> Productos
		{
			get
			{
				return this.GetTable<Producto>();
			}
		}
		
		public System.Data.Linq.Table<Producto_Carrito> Producto_Carritos
		{
			get
			{
				return this.GetTable<Producto_Carrito>();
			}
		}
		
		public System.Data.Linq.Table<Producto_Tag> Producto_Tags
		{
			get
			{
				return this.GetTable<Producto_Tag>();
			}
		}
		
		public System.Data.Linq.Table<Producto_Usuario> Producto_Usuarios
		{
			get
			{
				return this.GetTable<Producto_Usuario>();
			}
		}
		
		public System.Data.Linq.Table<Propiedad> Propiedads
		{
			get
			{
				return this.GetTable<Propiedad>();
			}
		}
		
		public System.Data.Linq.Table<SubCategoria> SubCategorias
		{
			get
			{
				return this.GetTable<SubCategoria>();
			}
		}
		
		public System.Data.Linq.Table<SubCategoria_Propiedad> SubCategoria_Propiedads
		{
			get
			{
				return this.GetTable<SubCategoria_Propiedad>();
			}
		}
		
		public System.Data.Linq.Table<Sucursal> Sucursals
		{
			get
			{
				return this.GetTable<Sucursal>();
			}
		}
		
		public System.Data.Linq.Table<Tag> Tags
		{
			get
			{
				return this.GetTable<Tag>();
			}
		}
		
		public System.Data.Linq.Table<Tienda> Tiendas
		{
			get
			{
				return this.GetTable<Tienda>();
			}
		}
		
		public System.Data.Linq.Table<Usuario> Usuarios
		{
			get
			{
				return this.GetTable<Usuario>();
			}
		}
		
		public System.Data.Linq.Table<Valor> Valors
		{
			get
			{
				return this.GetTable<Valor>();
			}
		}
	}
	
	[Table(Name="dbo.Vendido")]
	public partial class Vendido : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CarritoID;
		
		private System.DateTime _Fecha;
		
		private double _Total;
		
		private int _UsuarioID;
		
		private int _MetodoDePagoID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCarritoIDChanging(int value);
    partial void OnCarritoIDChanged();
    partial void OnFechaChanging(System.DateTime value);
    partial void OnFechaChanged();
    partial void OnTotalChanging(double value);
    partial void OnTotalChanged();
    partial void OnUsuarioIDChanging(int value);
    partial void OnUsuarioIDChanged();
    partial void OnMetodoDePagoIDChanging(int value);
    partial void OnMetodoDePagoIDChanged();
    #endregion
		
		public Vendido()
		{
			OnCreated();
		}
		
		[Column(Storage="_CarritoID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CarritoID
		{
			get
			{
				return this._CarritoID;
			}
			set
			{
				if ((this._CarritoID != value))
				{
					this.OnCarritoIDChanging(value);
					this.SendPropertyChanging();
					this._CarritoID = value;
					this.SendPropertyChanged("CarritoID");
					this.OnCarritoIDChanged();
				}
			}
		}
		
		[Column(Storage="_Fecha", DbType="DateTime NOT NULL")]
		public System.DateTime Fecha
		{
			get
			{
				return this._Fecha;
			}
			set
			{
				if ((this._Fecha != value))
				{
					this.OnFechaChanging(value);
					this.SendPropertyChanging();
					this._Fecha = value;
					this.SendPropertyChanged("Fecha");
					this.OnFechaChanged();
				}
			}
		}
		
		[Column(Storage="_Total", DbType="Float NOT NULL")]
		public double Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[Column(Storage="_UsuarioID", DbType="Int NOT NULL")]
		public int UsuarioID
		{
			get
			{
				return this._UsuarioID;
			}
			set
			{
				if ((this._UsuarioID != value))
				{
					this.OnUsuarioIDChanging(value);
					this.SendPropertyChanging();
					this._UsuarioID = value;
					this.SendPropertyChanged("UsuarioID");
					this.OnUsuarioIDChanged();
				}
			}
		}
		
		[Column(Storage="_MetodoDePagoID", DbType="Int NOT NULL")]
		public int MetodoDePagoID
		{
			get
			{
				return this._MetodoDePagoID;
			}
			set
			{
				if ((this._MetodoDePagoID != value))
				{
					this.OnMetodoDePagoIDChanging(value);
					this.SendPropertyChanging();
					this._MetodoDePagoID = value;
					this.SendPropertyChanged("MetodoDePagoID");
					this.OnMetodoDePagoIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Carrito")]
	public partial class Carrito : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CarritoID;
		
		private System.Nullable<int> _UsuarioID;
		
		private System.Nullable<System.DateTime> _Fecha;
		
		private System.Nullable<double> _Total;
		
		private System.Nullable<int> _MetodoDePagoID;
		
		private string _CarritoType;
		
		private EntitySet<Producto_Carrito> _Producto_Carritos;
		
		private EntityRef<MetodoDePago> _MetodoDePago;
		
		private EntityRef<Usuario> _Usuario;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCarritoIDChanging(int value);
    partial void OnCarritoIDChanged();
    partial void OnUsuarioIDChanging(System.Nullable<int> value);
    partial void OnUsuarioIDChanged();
    partial void OnFechaChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaChanged();
    partial void OnTotalChanging(System.Nullable<double> value);
    partial void OnTotalChanged();
    partial void OnMetodoDePagoIDChanging(System.Nullable<int> value);
    partial void OnMetodoDePagoIDChanged();
    partial void OnCarritoTypeChanging(string value);
    partial void OnCarritoTypeChanged();
    #endregion
		
		public Carrito()
		{
			this._Producto_Carritos = new EntitySet<Producto_Carrito>(new Action<Producto_Carrito>(this.attach_Producto_Carritos), new Action<Producto_Carrito>(this.detach_Producto_Carritos));
			this._MetodoDePago = default(EntityRef<MetodoDePago>);
			this._Usuario = default(EntityRef<Usuario>);
			OnCreated();
		}
		
		[Column(Storage="_CarritoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CarritoID
		{
			get
			{
				return this._CarritoID;
			}
			set
			{
				if ((this._CarritoID != value))
				{
					this.OnCarritoIDChanging(value);
					this.SendPropertyChanging();
					this._CarritoID = value;
					this.SendPropertyChanged("CarritoID");
					this.OnCarritoIDChanged();
				}
			}
		}
		
		[Column(Storage="_UsuarioID", DbType="Int")]
		public System.Nullable<int> UsuarioID
		{
			get
			{
				return this._UsuarioID;
			}
			set
			{
				if ((this._UsuarioID != value))
				{
					if (this._Usuario.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUsuarioIDChanging(value);
					this.SendPropertyChanging();
					this._UsuarioID = value;
					this.SendPropertyChanged("UsuarioID");
					this.OnUsuarioIDChanged();
				}
			}
		}
		
		[Column(Storage="_Fecha", DbType="DateTime")]
		public System.Nullable<System.DateTime> Fecha
		{
			get
			{
				return this._Fecha;
			}
			set
			{
				if ((this._Fecha != value))
				{
					this.OnFechaChanging(value);
					this.SendPropertyChanging();
					this._Fecha = value;
					this.SendPropertyChanged("Fecha");
					this.OnFechaChanged();
				}
			}
		}
		
		[Column(Storage="_Total", DbType="Float")]
		public System.Nullable<double> Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[Column(Storage="_MetodoDePagoID", DbType="Int")]
		public System.Nullable<int> MetodoDePagoID
		{
			get
			{
				return this._MetodoDePagoID;
			}
			set
			{
				if ((this._MetodoDePagoID != value))
				{
					if (this._MetodoDePago.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMetodoDePagoIDChanging(value);
					this.SendPropertyChanging();
					this._MetodoDePagoID = value;
					this.SendPropertyChanged("MetodoDePagoID");
					this.OnMetodoDePagoIDChanged();
				}
			}
		}
		
		[Column(Storage="_CarritoType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CarritoType
		{
			get
			{
				return this._CarritoType;
			}
			set
			{
				if ((this._CarritoType != value))
				{
					this.OnCarritoTypeChanging(value);
					this.SendPropertyChanging();
					this._CarritoType = value;
					this.SendPropertyChanged("CarritoType");
					this.OnCarritoTypeChanged();
				}
			}
		}
		
		[Association(Name="Carrito_Producto_Carrito", Storage="_Producto_Carritos", ThisKey="CarritoID", OtherKey="CarritoID")]
		public EntitySet<Producto_Carrito> Producto_Carritos
		{
			get
			{
				return this._Producto_Carritos;
			}
			set
			{
				this._Producto_Carritos.Assign(value);
			}
		}
		
		[Association(Name="MetodoDePago_Carrito", Storage="_MetodoDePago", ThisKey="MetodoDePagoID", OtherKey="MetodoDePagoID", IsForeignKey=true)]
		public MetodoDePago MetodoDePago
		{
			get
			{
				return this._MetodoDePago.Entity;
			}
			set
			{
				MetodoDePago previousValue = this._MetodoDePago.Entity;
				if (((previousValue != value) 
							|| (this._MetodoDePago.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MetodoDePago.Entity = null;
						previousValue.Carritos.Remove(this);
					}
					this._MetodoDePago.Entity = value;
					if ((value != null))
					{
						value.Carritos.Add(this);
						this._MetodoDePagoID = value.MetodoDePagoID;
					}
					else
					{
						this._MetodoDePagoID = default(Nullable<int>);
					}
					this.SendPropertyChanged("MetodoDePago");
				}
			}
		}
		
		[Association(Name="Usuario_Carrito", Storage="_Usuario", ThisKey="UsuarioID", OtherKey="UsuarioID", IsForeignKey=true)]
		public Usuario Usuario
		{
			get
			{
				return this._Usuario.Entity;
			}
			set
			{
				Usuario previousValue = this._Usuario.Entity;
				if (((previousValue != value) 
							|| (this._Usuario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Usuario.Entity = null;
						previousValue.Carritos.Remove(this);
					}
					this._Usuario.Entity = value;
					if ((value != null))
					{
						value.Carritos.Add(this);
						this._UsuarioID = value.UsuarioID;
					}
					else
					{
						this._UsuarioID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Usuario");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Producto_Carritos(Producto_Carrito entity)
		{
			this.SendPropertyChanging();
			entity.Carrito = this;
		}
		
		private void detach_Producto_Carritos(Producto_Carrito entity)
		{
			this.SendPropertyChanging();
			entity.Carrito = null;
		}
	}
	
	[Table(Name="dbo.Categoria")]
	public partial class Categoria : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoriaID;
		
		private string _Nombre;
		
		private EntitySet<SubCategoria> _SubCategorias;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoriaIDChanging(int value);
    partial void OnCategoriaIDChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    #endregion
		
		public Categoria()
		{
			this._SubCategorias = new EntitySet<SubCategoria>(new Action<SubCategoria>(this.attach_SubCategorias), new Action<SubCategoria>(this.detach_SubCategorias));
			OnCreated();
		}
		
		[Column(Storage="_CategoriaID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CategoriaID
		{
			get
			{
				return this._CategoriaID;
			}
			set
			{
				if ((this._CategoriaID != value))
				{
					this.OnCategoriaIDChanging(value);
					this.SendPropertyChanging();
					this._CategoriaID = value;
					this.SendPropertyChanged("CategoriaID");
					this.OnCategoriaIDChanged();
				}
			}
		}
		
		[Column(Storage="_Nombre", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[Association(Name="Categoria_SubCategoria", Storage="_SubCategorias", ThisKey="CategoriaID", OtherKey="CategoriaID")]
		public EntitySet<SubCategoria> SubCategorias
		{
			get
			{
				return this._SubCategorias;
			}
			set
			{
				this._SubCategorias.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SubCategorias(SubCategoria entity)
		{
			this.SendPropertyChanging();
			entity.Categoria = this;
		}
		
		private void detach_SubCategorias(SubCategoria entity)
		{
			this.SendPropertyChanging();
			entity.Categoria = null;
		}
	}
	
	[Table(Name="dbo.Imagen")]
	public partial class Imagen : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ImagenID;
		
		private int _ProductoID;
		
		private System.Data.Linq.Binary _Imagen1;
		
		private System.Data.Linq.Binary _Thumbnail;
		
		private string _MIMEType;
		
		private string _Nombre;
		
		private string _ImagenURL;
		
		private string _ThumbnailURL;
		
		private EntityRef<Producto> _Producto;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnImagenIDChanging(int value);
    partial void OnImagenIDChanged();
    partial void OnProductoIDChanging(int value);
    partial void OnProductoIDChanged();
    partial void OnImagen1Changing(System.Data.Linq.Binary value);
    partial void OnImagen1Changed();
    partial void OnThumbnailChanging(System.Data.Linq.Binary value);
    partial void OnThumbnailChanged();
    partial void OnMIMETypeChanging(string value);
    partial void OnMIMETypeChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnImagenURLChanging(string value);
    partial void OnImagenURLChanged();
    partial void OnThumbnailURLChanging(string value);
    partial void OnThumbnailURLChanged();
    #endregion
		
		public Imagen()
		{
			this._Producto = default(EntityRef<Producto>);
			OnCreated();
		}
		
		[Column(Storage="_ImagenID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ImagenID
		{
			get
			{
				return this._ImagenID;
			}
			set
			{
				if ((this._ImagenID != value))
				{
					this.OnImagenIDChanging(value);
					this.SendPropertyChanging();
					this._ImagenID = value;
					this.SendPropertyChanged("ImagenID");
					this.OnImagenIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProductoID", DbType="Int NOT NULL")]
		public int ProductoID
		{
			get
			{
				return this._ProductoID;
			}
			set
			{
				if ((this._ProductoID != value))
				{
					if (this._Producto.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductoIDChanging(value);
					this.SendPropertyChanging();
					this._ProductoID = value;
					this.SendPropertyChanged("ProductoID");
					this.OnProductoIDChanged();
				}
			}
		}
		
		[Column(Name="Imagen", Storage="_Imagen1", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Imagen1
		{
			get
			{
				return this._Imagen1;
			}
			set
			{
				if ((this._Imagen1 != value))
				{
					this.OnImagen1Changing(value);
					this.SendPropertyChanging();
					this._Imagen1 = value;
					this.SendPropertyChanged("Imagen1");
					this.OnImagen1Changed();
				}
			}
		}
		
		[Column(Storage="_Thumbnail", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Thumbnail
		{
			get
			{
				return this._Thumbnail;
			}
			set
			{
				if ((this._Thumbnail != value))
				{
					this.OnThumbnailChanging(value);
					this.SendPropertyChanging();
					this._Thumbnail = value;
					this.SendPropertyChanged("Thumbnail");
					this.OnThumbnailChanged();
				}
			}
		}
		
		[Column(Storage="_MIMEType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string MIMEType
		{
			get
			{
				return this._MIMEType;
			}
			set
			{
				if ((this._MIMEType != value))
				{
					this.OnMIMETypeChanging(value);
					this.SendPropertyChanging();
					this._MIMEType = value;
					this.SendPropertyChanged("MIMEType");
					this.OnMIMETypeChanged();
				}
			}
		}
		
		[Column(Storage="_Nombre", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[Column(Storage="_ImagenURL", DbType="VarChar(250)")]
		public string ImagenURL
		{
			get
			{
				return this._ImagenURL;
			}
			set
			{
				if ((this._ImagenURL != value))
				{
					this.OnImagenURLChanging(value);
					this.SendPropertyChanging();
					this._ImagenURL = value;
					this.SendPropertyChanged("ImagenURL");
					this.OnImagenURLChanged();
				}
			}
		}
		
		[Column(Storage="_ThumbnailURL", DbType="VarChar(250)")]
		public string ThumbnailURL
		{
			get
			{
				return this._ThumbnailURL;
			}
			set
			{
				if ((this._ThumbnailURL != value))
				{
					this.OnThumbnailURLChanging(value);
					this.SendPropertyChanging();
					this._ThumbnailURL = value;
					this.SendPropertyChanged("ThumbnailURL");
					this.OnThumbnailURLChanged();
				}
			}
		}
		
		[Association(Name="Producto_Imagen", Storage="_Producto", ThisKey="ProductoID", OtherKey="ProductoID", IsForeignKey=true)]
		public Producto Producto
		{
			get
			{
				return this._Producto.Entity;
			}
			set
			{
				Producto previousValue = this._Producto.Entity;
				if (((previousValue != value) 
							|| (this._Producto.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Producto.Entity = null;
						previousValue.Imagens.Remove(this);
					}
					this._Producto.Entity = value;
					if ((value != null))
					{
						value.Imagens.Add(this);
						this._ProductoID = value.ProductoID;
					}
					else
					{
						this._ProductoID = default(int);
					}
					this.SendPropertyChanged("Producto");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MetodoDePago")]
	[InheritanceMapping(Code="Tarjeta", Type=typeof(Tarjeta), IsDefault=true)]
	[InheritanceMapping(Code="PayPal", Type=typeof(PayPal))]
	public partial class MetodoDePago : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MetodoDePagoID;
		
		private string _MetodoDePagoType;
		
		private string _Numero;
		
		private System.Nullable<int> _UsuarioID;
		
		private string _Titular;
		
		private string _Vencimiento;
		
		private string _Tipo;
		
		private System.Nullable<bool> _Validada;
		
		private EntitySet<Carrito> _Carritos;
		
		private EntityRef<Usuario> _Usuario;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMetodoDePagoIDChanging(int value);
    partial void OnMetodoDePagoIDChanged();
    partial void OnMetodoDePagoTypeChanging(string value);
    partial void OnMetodoDePagoTypeChanged();
    partial void OnNumeroChanging(string value);
    partial void OnNumeroChanged();
    partial void OnUsuarioIDChanging(System.Nullable<int> value);
    partial void OnUsuarioIDChanged();
    partial void OnTitularChanging(string value);
    partial void OnTitularChanged();
    partial void OnVencimientoChanging(string value);
    partial void OnVencimientoChanged();
    partial void OnTipoChanging(string value);
    partial void OnTipoChanged();
    partial void OnValidadaChanging(System.Nullable<bool> value);
    partial void OnValidadaChanged();
    #endregion
		
		public MetodoDePago()
		{
			this._Carritos = new EntitySet<Carrito>(new Action<Carrito>(this.attach_Carritos), new Action<Carrito>(this.detach_Carritos));
			this._Usuario = default(EntityRef<Usuario>);
			OnCreated();
		}
		
		[Column(Storage="_MetodoDePagoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MetodoDePagoID
		{
			get
			{
				return this._MetodoDePagoID;
			}
			set
			{
				if ((this._MetodoDePagoID != value))
				{
					this.OnMetodoDePagoIDChanging(value);
					this.SendPropertyChanging();
					this._MetodoDePagoID = value;
					this.SendPropertyChanged("MetodoDePagoID");
					this.OnMetodoDePagoIDChanged();
				}
			}
		}
		
		[Column(Storage="_MetodoDePagoType", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsDiscriminator=true)]
		public string MetodoDePagoType
		{
			get
			{
				return this._MetodoDePagoType;
			}
			set
			{
				if ((this._MetodoDePagoType != value))
				{
					this.OnMetodoDePagoTypeChanging(value);
					this.SendPropertyChanging();
					this._MetodoDePagoType = value;
					this.SendPropertyChanged("MetodoDePagoType");
					this.OnMetodoDePagoTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Numero", DbType="NVarChar(50)")]
		public string Numero
		{
			get
			{
				return this._Numero;
			}
			set
			{
				if ((this._Numero != value))
				{
					this.OnNumeroChanging(value);
					this.SendPropertyChanging();
					this._Numero = value;
					this.SendPropertyChanged("Numero");
					this.OnNumeroChanged();
				}
			}
		}
		
		[Column(Storage="_UsuarioID", DbType="Int")]
		public System.Nullable<int> UsuarioID
		{
			get
			{
				return this._UsuarioID;
			}
			set
			{
				if ((this._UsuarioID != value))
				{
					if (this._Usuario.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUsuarioIDChanging(value);
					this.SendPropertyChanging();
					this._UsuarioID = value;
					this.SendPropertyChanged("UsuarioID");
					this.OnUsuarioIDChanged();
				}
			}
		}
		
		[Column(Storage="_Titular", DbType="VarChar(50)")]
		public string Titular
		{
			get
			{
				return this._Titular;
			}
			set
			{
				if ((this._Titular != value))
				{
					this.OnTitularChanging(value);
					this.SendPropertyChanging();
					this._Titular = value;
					this.SendPropertyChanged("Titular");
					this.OnTitularChanged();
				}
			}
		}
		
		[Column(Storage="_Vencimiento", DbType="VarChar(50)")]
		public string Vencimiento
		{
			get
			{
				return this._Vencimiento;
			}
			set
			{
				if ((this._Vencimiento != value))
				{
					this.OnVencimientoChanging(value);
					this.SendPropertyChanging();
					this._Vencimiento = value;
					this.SendPropertyChanged("Vencimiento");
					this.OnVencimientoChanged();
				}
			}
		}
		
		[Column(Storage="_Tipo", DbType="VarChar(50)")]
		public string Tipo
		{
			get
			{
				return this._Tipo;
			}
			set
			{
				if ((this._Tipo != value))
				{
					this.OnTipoChanging(value);
					this.SendPropertyChanging();
					this._Tipo = value;
					this.SendPropertyChanged("Tipo");
					this.OnTipoChanged();
				}
			}
		}
		
		[Column(Storage="_Validada", DbType="Bit")]
		public System.Nullable<bool> Validada
		{
			get
			{
				return this._Validada;
			}
			set
			{
				if ((this._Validada != value))
				{
					this.OnValidadaChanging(value);
					this.SendPropertyChanging();
					this._Validada = value;
					this.SendPropertyChanged("Validada");
					this.OnValidadaChanged();
				}
			}
		}
		
		[Association(Name="MetodoDePago_Carrito", Storage="_Carritos", ThisKey="MetodoDePagoID", OtherKey="MetodoDePagoID")]
		public EntitySet<Carrito> Carritos
		{
			get
			{
				return this._Carritos;
			}
			set
			{
				this._Carritos.Assign(value);
			}
		}
		
		[Association(Name="Usuario_MetodoDePago", Storage="_Usuario", ThisKey="UsuarioID", OtherKey="UsuarioID", IsForeignKey=true)]
		public Usuario Usuario
		{
			get
			{
				return this._Usuario.Entity;
			}
			set
			{
				Usuario previousValue = this._Usuario.Entity;
				if (((previousValue != value) 
							|| (this._Usuario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Usuario.Entity = null;
						previousValue.MetodoDePagos.Remove(this);
					}
					this._Usuario.Entity = value;
					if ((value != null))
					{
						value.MetodoDePagos.Add(this);
						this._UsuarioID = value.UsuarioID;
					}
					else
					{
						this._UsuarioID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Usuario");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Carritos(Carrito entity)
		{
			this.SendPropertyChanging();
			entity.MetodoDePago = this;
		}
		
		private void detach_Carritos(Carrito entity)
		{
			this.SendPropertyChanging();
			entity.MetodoDePago = null;
		}
	}
	
	public partial class Tarjeta : MetodoDePago
	{
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    #endregion
		
		public Tarjeta()
		{
			OnCreated();
		}
	}
	
	public partial class PayPal : MetodoDePago
	{
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    #endregion
		
		public PayPal()
		{
			OnCreated();
		}
	}
	
	[Table(Name="dbo.Producto")]
	public partial class Producto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductoID;
		
		private string _Nombre;
		
		private System.Nullable<int> _SubCategoriaID;
		
		private string _ExternalID;
		
		private System.Nullable<int> _TiendaID;
		
		private double _Precio;
		
		private EntitySet<Imagen> _Imagens;
		
		private EntitySet<Producto_Carrito> _Producto_Carritos;
		
		private EntitySet<Producto_Tag> _Producto_Tags;
		
		private EntitySet<Producto_Usuario> _Producto_Usuarios;
		
		private EntitySet<Valor> _Valors;
		
		private EntityRef<SubCategoria> _SubCategoria;
		
		private EntityRef<Tienda> _Tienda;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductoIDChanging(int value);
    partial void OnProductoIDChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnSubCategoriaIDChanging(System.Nullable<int> value);
    partial void OnSubCategoriaIDChanged();
    partial void OnExternalIDChanging(string value);
    partial void OnExternalIDChanged();
    partial void OnTiendaIDChanging(System.Nullable<int> value);
    partial void OnTiendaIDChanged();
    partial void OnPrecioChanging(double value);
    partial void OnPrecioChanged();
    #endregion
		
		public Producto()
		{
			this._Imagens = new EntitySet<Imagen>(new Action<Imagen>(this.attach_Imagens), new Action<Imagen>(this.detach_Imagens));
			this._Producto_Carritos = new EntitySet<Producto_Carrito>(new Action<Producto_Carrito>(this.attach_Producto_Carritos), new Action<Producto_Carrito>(this.detach_Producto_Carritos));
			this._Producto_Tags = new EntitySet<Producto_Tag>(new Action<Producto_Tag>(this.attach_Producto_Tags), new Action<Producto_Tag>(this.detach_Producto_Tags));
			this._Producto_Usuarios = new EntitySet<Producto_Usuario>(new Action<Producto_Usuario>(this.attach_Producto_Usuarios), new Action<Producto_Usuario>(this.detach_Producto_Usuarios));
			this._Valors = new EntitySet<Valor>(new Action<Valor>(this.attach_Valors), new Action<Valor>(this.detach_Valors));
			this._SubCategoria = default(EntityRef<SubCategoria>);
			this._Tienda = default(EntityRef<Tienda>);
			OnCreated();
		}
		
		[Column(Storage="_ProductoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductoID
		{
			get
			{
				return this._ProductoID;
			}
			set
			{
				if ((this._ProductoID != value))
				{
					this.OnProductoIDChanging(value);
					this.SendPropertyChanging();
					this._ProductoID = value;
					this.SendPropertyChanged("ProductoID");
					this.OnProductoIDChanged();
				}
			}
		}
		
		[Column(Storage="_Nombre", DbType="VarChar(350) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[Column(Storage="_SubCategoriaID", DbType="Int")]
		public System.Nullable<int> SubCategoriaID
		{
			get
			{
				return this._SubCategoriaID;
			}
			set
			{
				if ((this._SubCategoriaID != value))
				{
					if (this._SubCategoria.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubCategoriaIDChanging(value);
					this.SendPropertyChanging();
					this._SubCategoriaID = value;
					this.SendPropertyChanged("SubCategoriaID");
					this.OnSubCategoriaIDChanged();
				}
			}
		}
		
		[Column(Storage="_ExternalID", DbType="VarChar(150)")]
		public string ExternalID
		{
			get
			{
				return this._ExternalID;
			}
			set
			{
				if ((this._ExternalID != value))
				{
					this.OnExternalIDChanging(value);
					this.SendPropertyChanging();
					this._ExternalID = value;
					this.SendPropertyChanged("ExternalID");
					this.OnExternalIDChanged();
				}
			}
		}
		
		[Column(Storage="_TiendaID", DbType="Int")]
		public System.Nullable<int> TiendaID
		{
			get
			{
				return this._TiendaID;
			}
			set
			{
				if ((this._TiendaID != value))
				{
					if (this._Tienda.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTiendaIDChanging(value);
					this.SendPropertyChanging();
					this._TiendaID = value;
					this.SendPropertyChanged("TiendaID");
					this.OnTiendaIDChanged();
				}
			}
		}
		
		[Column(Storage="_Precio", DbType="Float NOT NULL")]
		public double Precio
		{
			get
			{
				return this._Precio;
			}
			set
			{
				if ((this._Precio != value))
				{
					this.OnPrecioChanging(value);
					this.SendPropertyChanging();
					this._Precio = value;
					this.SendPropertyChanged("Precio");
					this.OnPrecioChanged();
				}
			}
		}
		
		[Association(Name="Producto_Imagen", Storage="_Imagens", ThisKey="ProductoID", OtherKey="ProductoID")]
		public EntitySet<Imagen> Imagens
		{
			get
			{
				return this._Imagens;
			}
			set
			{
				this._Imagens.Assign(value);
			}
		}
		
		[Association(Name="Producto_Producto_Carrito", Storage="_Producto_Carritos", ThisKey="ProductoID", OtherKey="ProductoID")]
		public EntitySet<Producto_Carrito> Producto_Carritos
		{
			get
			{
				return this._Producto_Carritos;
			}
			set
			{
				this._Producto_Carritos.Assign(value);
			}
		}
		
		[Association(Name="Producto_Producto_Tag", Storage="_Producto_Tags", ThisKey="ProductoID", OtherKey="ProductoID")]
		public EntitySet<Producto_Tag> Producto_Tags
		{
			get
			{
				return this._Producto_Tags;
			}
			set
			{
				this._Producto_Tags.Assign(value);
			}
		}
		
		[Association(Name="Producto_Producto_Usuario", Storage="_Producto_Usuarios", ThisKey="ProductoID", OtherKey="ProductoID")]
		public EntitySet<Producto_Usuario> Producto_Usuarios
		{
			get
			{
				return this._Producto_Usuarios;
			}
			set
			{
				this._Producto_Usuarios.Assign(value);
			}
		}
		
		[Association(Name="Producto_Valor", Storage="_Valors", ThisKey="ProductoID", OtherKey="ProductoID")]
		public EntitySet<Valor> Valors
		{
			get
			{
				return this._Valors;
			}
			set
			{
				this._Valors.Assign(value);
			}
		}
		
		[Association(Name="SubCategoria_Producto", Storage="_SubCategoria", ThisKey="SubCategoriaID", OtherKey="SubCategoriaID", IsForeignKey=true)]
		public SubCategoria SubCategoria
		{
			get
			{
				return this._SubCategoria.Entity;
			}
			set
			{
				SubCategoria previousValue = this._SubCategoria.Entity;
				if (((previousValue != value) 
							|| (this._SubCategoria.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubCategoria.Entity = null;
						previousValue.Productos.Remove(this);
					}
					this._SubCategoria.Entity = value;
					if ((value != null))
					{
						value.Productos.Add(this);
						this._SubCategoriaID = value.SubCategoriaID;
					}
					else
					{
						this._SubCategoriaID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SubCategoria");
				}
			}
		}
		
		[Association(Name="Tienda_Producto", Storage="_Tienda", ThisKey="TiendaID", OtherKey="TiendaID", IsForeignKey=true)]
		public Tienda Tienda
		{
			get
			{
				return this._Tienda.Entity;
			}
			set
			{
				Tienda previousValue = this._Tienda.Entity;
				if (((previousValue != value) 
							|| (this._Tienda.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tienda.Entity = null;
						previousValue.Productos.Remove(this);
					}
					this._Tienda.Entity = value;
					if ((value != null))
					{
						value.Productos.Add(this);
						this._TiendaID = value.TiendaID;
					}
					else
					{
						this._TiendaID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Tienda");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Imagens(Imagen entity)
		{
			this.SendPropertyChanging();
			entity.Producto = this;
		}
		
		private void detach_Imagens(Imagen entity)
		{
			this.SendPropertyChanging();
			entity.Producto = null;
		}
		
		private void attach_Producto_Carritos(Producto_Carrito entity)
		{
			this.SendPropertyChanging();
			entity.Producto = this;
		}
		
		private void detach_Producto_Carritos(Producto_Carrito entity)
		{
			this.SendPropertyChanging();
			entity.Producto = null;
		}
		
		private void attach_Producto_Tags(Producto_Tag entity)
		{
			this.SendPropertyChanging();
			entity.Producto = this;
		}
		
		private void detach_Producto_Tags(Producto_Tag entity)
		{
			this.SendPropertyChanging();
			entity.Producto = null;
		}
		
		private void attach_Producto_Usuarios(Producto_Usuario entity)
		{
			this.SendPropertyChanging();
			entity.Producto = this;
		}
		
		private void detach_Producto_Usuarios(Producto_Usuario entity)
		{
			this.SendPropertyChanging();
			entity.Producto = null;
		}
		
		private void attach_Valors(Valor entity)
		{
			this.SendPropertyChanging();
			entity.Producto = this;
		}
		
		private void detach_Valors(Valor entity)
		{
			this.SendPropertyChanging();
			entity.Producto = null;
		}
	}
	
	[Table(Name="dbo.Producto_Carrito")]
	public partial class Producto_Carrito : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductoID;
		
		private int _CarritoID;
		
		private char _EstaEnCarrito;
		
		private int _Cantidad;
		
		private EntityRef<Carrito> _Carrito;
		
		private EntityRef<Producto> _Producto;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductoIDChanging(int value);
    partial void OnProductoIDChanged();
    partial void OnCarritoIDChanging(int value);
    partial void OnCarritoIDChanged();
    partial void OnEstaEnCarritoChanging(char value);
    partial void OnEstaEnCarritoChanged();
    partial void OnCantidadChanging(int value);
    partial void OnCantidadChanged();
    #endregion
		
		public Producto_Carrito()
		{
			this._Carrito = default(EntityRef<Carrito>);
			this._Producto = default(EntityRef<Producto>);
			OnCreated();
		}
		
		[Column(Storage="_ProductoID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductoID
		{
			get
			{
				return this._ProductoID;
			}
			set
			{
				if ((this._ProductoID != value))
				{
					if (this._Producto.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductoIDChanging(value);
					this.SendPropertyChanging();
					this._ProductoID = value;
					this.SendPropertyChanged("ProductoID");
					this.OnProductoIDChanged();
				}
			}
		}
		
		[Column(Storage="_CarritoID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CarritoID
		{
			get
			{
				return this._CarritoID;
			}
			set
			{
				if ((this._CarritoID != value))
				{
					if (this._Carrito.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarritoIDChanging(value);
					this.SendPropertyChanging();
					this._CarritoID = value;
					this.SendPropertyChanged("CarritoID");
					this.OnCarritoIDChanged();
				}
			}
		}
		
		[Column(Storage="_EstaEnCarrito", DbType="VarChar(1) NOT NULL")]
		public char EstaEnCarrito
		{
			get
			{
				return this._EstaEnCarrito;
			}
			set
			{
				if ((this._EstaEnCarrito != value))
				{
					this.OnEstaEnCarritoChanging(value);
					this.SendPropertyChanging();
					this._EstaEnCarrito = value;
					this.SendPropertyChanged("EstaEnCarrito");
					this.OnEstaEnCarritoChanged();
				}
			}
		}
		
		[Column(Storage="_Cantidad", DbType="Int NOT NULL")]
		public int Cantidad
		{
			get
			{
				return this._Cantidad;
			}
			set
			{
				if ((this._Cantidad != value))
				{
					this.OnCantidadChanging(value);
					this.SendPropertyChanging();
					this._Cantidad = value;
					this.SendPropertyChanged("Cantidad");
					this.OnCantidadChanged();
				}
			}
		}
		
		[Association(Name="Carrito_Producto_Carrito", Storage="_Carrito", ThisKey="CarritoID", OtherKey="CarritoID", IsForeignKey=true)]
		public Carrito Carrito
		{
			get
			{
				return this._Carrito.Entity;
			}
			set
			{
				Carrito previousValue = this._Carrito.Entity;
				if (((previousValue != value) 
							|| (this._Carrito.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Carrito.Entity = null;
						previousValue.Producto_Carritos.Remove(this);
					}
					this._Carrito.Entity = value;
					if ((value != null))
					{
						value.Producto_Carritos.Add(this);
						this._CarritoID = value.CarritoID;
					}
					else
					{
						this._CarritoID = default(int);
					}
					this.SendPropertyChanged("Carrito");
				}
			}
		}
		
		[Association(Name="Producto_Producto_Carrito", Storage="_Producto", ThisKey="ProductoID", OtherKey="ProductoID", IsForeignKey=true)]
		public Producto Producto
		{
			get
			{
				return this._Producto.Entity;
			}
			set
			{
				Producto previousValue = this._Producto.Entity;
				if (((previousValue != value) 
							|| (this._Producto.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Producto.Entity = null;
						previousValue.Producto_Carritos.Remove(this);
					}
					this._Producto.Entity = value;
					if ((value != null))
					{
						value.Producto_Carritos.Add(this);
						this._ProductoID = value.ProductoID;
					}
					else
					{
						this._ProductoID = default(int);
					}
					this.SendPropertyChanged("Producto");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Producto_Tag")]
	public partial class Producto_Tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductoID;
		
		private int _TagID;
		
		private int _UsuarioID;
		
		private EntityRef<Producto> _Producto;
		
		private EntityRef<Tag> _Tag;
		
		private EntityRef<Usuario> _Usuario;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductoIDChanging(int value);
    partial void OnProductoIDChanged();
    partial void OnTagIDChanging(int value);
    partial void OnTagIDChanged();
    partial void OnUsuarioIDChanging(int value);
    partial void OnUsuarioIDChanged();
    #endregion
		
		public Producto_Tag()
		{
			this._Producto = default(EntityRef<Producto>);
			this._Tag = default(EntityRef<Tag>);
			this._Usuario = default(EntityRef<Usuario>);
			OnCreated();
		}
		
		[Column(Storage="_ProductoID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductoID
		{
			get
			{
				return this._ProductoID;
			}
			set
			{
				if ((this._ProductoID != value))
				{
					if (this._Producto.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductoIDChanging(value);
					this.SendPropertyChanging();
					this._ProductoID = value;
					this.SendPropertyChanged("ProductoID");
					this.OnProductoIDChanged();
				}
			}
		}
		
		[Column(Storage="_TagID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TagID
		{
			get
			{
				return this._TagID;
			}
			set
			{
				if ((this._TagID != value))
				{
					if (this._Tag.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTagIDChanging(value);
					this.SendPropertyChanging();
					this._TagID = value;
					this.SendPropertyChanged("TagID");
					this.OnTagIDChanged();
				}
			}
		}
		
		[Column(Storage="_UsuarioID", DbType="Int NOT NULL")]
		public int UsuarioID
		{
			get
			{
				return this._UsuarioID;
			}
			set
			{
				if ((this._UsuarioID != value))
				{
					if (this._Usuario.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUsuarioIDChanging(value);
					this.SendPropertyChanging();
					this._UsuarioID = value;
					this.SendPropertyChanged("UsuarioID");
					this.OnUsuarioIDChanged();
				}
			}
		}
		
		[Association(Name="Producto_Producto_Tag", Storage="_Producto", ThisKey="ProductoID", OtherKey="ProductoID", IsForeignKey=true)]
		public Producto Producto
		{
			get
			{
				return this._Producto.Entity;
			}
			set
			{
				Producto previousValue = this._Producto.Entity;
				if (((previousValue != value) 
							|| (this._Producto.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Producto.Entity = null;
						previousValue.Producto_Tags.Remove(this);
					}
					this._Producto.Entity = value;
					if ((value != null))
					{
						value.Producto_Tags.Add(this);
						this._ProductoID = value.ProductoID;
					}
					else
					{
						this._ProductoID = default(int);
					}
					this.SendPropertyChanged("Producto");
				}
			}
		}
		
		[Association(Name="Tag_Producto_Tag", Storage="_Tag", ThisKey="TagID", OtherKey="TagID", IsForeignKey=true)]
		public Tag Tag
		{
			get
			{
				return this._Tag.Entity;
			}
			set
			{
				Tag previousValue = this._Tag.Entity;
				if (((previousValue != value) 
							|| (this._Tag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tag.Entity = null;
						previousValue.Producto_Tags.Remove(this);
					}
					this._Tag.Entity = value;
					if ((value != null))
					{
						value.Producto_Tags.Add(this);
						this._TagID = value.TagID;
					}
					else
					{
						this._TagID = default(int);
					}
					this.SendPropertyChanged("Tag");
				}
			}
		}
		
		[Association(Name="Usuario_Producto_Tag", Storage="_Usuario", ThisKey="UsuarioID", OtherKey="UsuarioID", IsForeignKey=true)]
		public Usuario Usuario
		{
			get
			{
				return this._Usuario.Entity;
			}
			set
			{
				Usuario previousValue = this._Usuario.Entity;
				if (((previousValue != value) 
							|| (this._Usuario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Usuario.Entity = null;
						previousValue.Producto_Tags.Remove(this);
					}
					this._Usuario.Entity = value;
					if ((value != null))
					{
						value.Producto_Tags.Add(this);
						this._UsuarioID = value.UsuarioID;
					}
					else
					{
						this._UsuarioID = default(int);
					}
					this.SendPropertyChanged("Usuario");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Producto_Usuario")]
	public partial class Producto_Usuario : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductoID;
		
		private int _UsuarioID;
		
		private System.Nullable<double> _Puntaje;
		
		private string _Comentario;
		
		private EntityRef<Producto> _Producto;
		
		private EntityRef<Usuario> _Usuario;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductoIDChanging(int value);
    partial void OnProductoIDChanged();
    partial void OnUsuarioIDChanging(int value);
    partial void OnUsuarioIDChanged();
    partial void OnPuntajeChanging(System.Nullable<double> value);
    partial void OnPuntajeChanged();
    partial void OnComentarioChanging(string value);
    partial void OnComentarioChanged();
    #endregion
		
		public Producto_Usuario()
		{
			this._Producto = default(EntityRef<Producto>);
			this._Usuario = default(EntityRef<Usuario>);
			OnCreated();
		}
		
		[Column(Storage="_ProductoID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductoID
		{
			get
			{
				return this._ProductoID;
			}
			set
			{
				if ((this._ProductoID != value))
				{
					if (this._Producto.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductoIDChanging(value);
					this.SendPropertyChanging();
					this._ProductoID = value;
					this.SendPropertyChanged("ProductoID");
					this.OnProductoIDChanged();
				}
			}
		}
		
		[Column(Storage="_UsuarioID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UsuarioID
		{
			get
			{
				return this._UsuarioID;
			}
			set
			{
				if ((this._UsuarioID != value))
				{
					if (this._Usuario.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUsuarioIDChanging(value);
					this.SendPropertyChanging();
					this._UsuarioID = value;
					this.SendPropertyChanged("UsuarioID");
					this.OnUsuarioIDChanged();
				}
			}
		}
		
		[Column(Storage="_Puntaje", DbType="Float")]
		public System.Nullable<double> Puntaje
		{
			get
			{
				return this._Puntaje;
			}
			set
			{
				if ((this._Puntaje != value))
				{
					this.OnPuntajeChanging(value);
					this.SendPropertyChanging();
					this._Puntaje = value;
					this.SendPropertyChanged("Puntaje");
					this.OnPuntajeChanged();
				}
			}
		}
		
		[Column(Storage="_Comentario", DbType="VarChar(150)")]
		public string Comentario
		{
			get
			{
				return this._Comentario;
			}
			set
			{
				if ((this._Comentario != value))
				{
					this.OnComentarioChanging(value);
					this.SendPropertyChanging();
					this._Comentario = value;
					this.SendPropertyChanged("Comentario");
					this.OnComentarioChanged();
				}
			}
		}
		
		[Association(Name="Producto_Producto_Usuario", Storage="_Producto", ThisKey="ProductoID", OtherKey="ProductoID", IsForeignKey=true)]
		public Producto Producto
		{
			get
			{
				return this._Producto.Entity;
			}
			set
			{
				Producto previousValue = this._Producto.Entity;
				if (((previousValue != value) 
							|| (this._Producto.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Producto.Entity = null;
						previousValue.Producto_Usuarios.Remove(this);
					}
					this._Producto.Entity = value;
					if ((value != null))
					{
						value.Producto_Usuarios.Add(this);
						this._ProductoID = value.ProductoID;
					}
					else
					{
						this._ProductoID = default(int);
					}
					this.SendPropertyChanged("Producto");
				}
			}
		}
		
		[Association(Name="Usuario_Producto_Usuario", Storage="_Usuario", ThisKey="UsuarioID", OtherKey="UsuarioID", IsForeignKey=true)]
		public Usuario Usuario
		{
			get
			{
				return this._Usuario.Entity;
			}
			set
			{
				Usuario previousValue = this._Usuario.Entity;
				if (((previousValue != value) 
							|| (this._Usuario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Usuario.Entity = null;
						previousValue.Producto_Usuarios.Remove(this);
					}
					this._Usuario.Entity = value;
					if ((value != null))
					{
						value.Producto_Usuarios.Add(this);
						this._UsuarioID = value.UsuarioID;
					}
					else
					{
						this._UsuarioID = default(int);
					}
					this.SendPropertyChanged("Usuario");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Propiedad")]
	public partial class Propiedad : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PropiedadID;
		
		private string _Nombre;
		
		private EntitySet<SubCategoria_Propiedad> _SubCategoria_Propiedads;
		
		private EntitySet<Valor> _Valors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPropiedadIDChanging(int value);
    partial void OnPropiedadIDChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    #endregion
		
		public Propiedad()
		{
			this._SubCategoria_Propiedads = new EntitySet<SubCategoria_Propiedad>(new Action<SubCategoria_Propiedad>(this.attach_SubCategoria_Propiedads), new Action<SubCategoria_Propiedad>(this.detach_SubCategoria_Propiedads));
			this._Valors = new EntitySet<Valor>(new Action<Valor>(this.attach_Valors), new Action<Valor>(this.detach_Valors));
			OnCreated();
		}
		
		[Column(Storage="_PropiedadID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PropiedadID
		{
			get
			{
				return this._PropiedadID;
			}
			set
			{
				if ((this._PropiedadID != value))
				{
					this.OnPropiedadIDChanging(value);
					this.SendPropertyChanging();
					this._PropiedadID = value;
					this.SendPropertyChanged("PropiedadID");
					this.OnPropiedadIDChanged();
				}
			}
		}
		
		[Column(Storage="_Nombre", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[Association(Name="Propiedad_SubCategoria_Propiedad", Storage="_SubCategoria_Propiedads", ThisKey="PropiedadID", OtherKey="PropiedadID")]
		public EntitySet<SubCategoria_Propiedad> SubCategoria_Propiedads
		{
			get
			{
				return this._SubCategoria_Propiedads;
			}
			set
			{
				this._SubCategoria_Propiedads.Assign(value);
			}
		}
		
		[Association(Name="Propiedad_Valor", Storage="_Valors", ThisKey="PropiedadID", OtherKey="PropiedadID")]
		public EntitySet<Valor> Valors
		{
			get
			{
				return this._Valors;
			}
			set
			{
				this._Valors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SubCategoria_Propiedads(SubCategoria_Propiedad entity)
		{
			this.SendPropertyChanging();
			entity.Propiedad = this;
		}
		
		private void detach_SubCategoria_Propiedads(SubCategoria_Propiedad entity)
		{
			this.SendPropertyChanging();
			entity.Propiedad = null;
		}
		
		private void attach_Valors(Valor entity)
		{
			this.SendPropertyChanging();
			entity.Propiedad = this;
		}
		
		private void detach_Valors(Valor entity)
		{
			this.SendPropertyChanging();
			entity.Propiedad = null;
		}
	}
	
	[Table(Name="dbo.SubCategoria")]
	public partial class SubCategoria : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubCategoriaID;
		
		private string _Nombre;
		
		private int _CategoriaID;
		
		private EntitySet<Producto> _Productos;
		
		private EntitySet<SubCategoria_Propiedad> _SubCategoria_Propiedads;
		
		private EntityRef<Categoria> _Categoria;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubCategoriaIDChanging(int value);
    partial void OnSubCategoriaIDChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnCategoriaIDChanging(int value);
    partial void OnCategoriaIDChanged();
    #endregion
		
		public SubCategoria()
		{
			this._Productos = new EntitySet<Producto>(new Action<Producto>(this.attach_Productos), new Action<Producto>(this.detach_Productos));
			this._SubCategoria_Propiedads = new EntitySet<SubCategoria_Propiedad>(new Action<SubCategoria_Propiedad>(this.attach_SubCategoria_Propiedads), new Action<SubCategoria_Propiedad>(this.detach_SubCategoria_Propiedads));
			this._Categoria = default(EntityRef<Categoria>);
			OnCreated();
		}
		
		[Column(Storage="_SubCategoriaID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SubCategoriaID
		{
			get
			{
				return this._SubCategoriaID;
			}
			set
			{
				if ((this._SubCategoriaID != value))
				{
					this.OnSubCategoriaIDChanging(value);
					this.SendPropertyChanging();
					this._SubCategoriaID = value;
					this.SendPropertyChanged("SubCategoriaID");
					this.OnSubCategoriaIDChanged();
				}
			}
		}
		
		[Column(Storage="_Nombre", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[Column(Storage="_CategoriaID", DbType="Int NOT NULL")]
		public int CategoriaID
		{
			get
			{
				return this._CategoriaID;
			}
			set
			{
				if ((this._CategoriaID != value))
				{
					if (this._Categoria.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoriaIDChanging(value);
					this.SendPropertyChanging();
					this._CategoriaID = value;
					this.SendPropertyChanged("CategoriaID");
					this.OnCategoriaIDChanged();
				}
			}
		}
		
		[Association(Name="SubCategoria_Producto", Storage="_Productos", ThisKey="SubCategoriaID", OtherKey="SubCategoriaID")]
		public EntitySet<Producto> Productos
		{
			get
			{
				return this._Productos;
			}
			set
			{
				this._Productos.Assign(value);
			}
		}
		
		[Association(Name="SubCategoria_SubCategoria_Propiedad", Storage="_SubCategoria_Propiedads", ThisKey="SubCategoriaID", OtherKey="SubCategoriaID")]
		public EntitySet<SubCategoria_Propiedad> SubCategoria_Propiedads
		{
			get
			{
				return this._SubCategoria_Propiedads;
			}
			set
			{
				this._SubCategoria_Propiedads.Assign(value);
			}
		}
		
		[Association(Name="Categoria_SubCategoria", Storage="_Categoria", ThisKey="CategoriaID", OtherKey="CategoriaID", IsForeignKey=true)]
		public Categoria Categoria
		{
			get
			{
				return this._Categoria.Entity;
			}
			set
			{
				Categoria previousValue = this._Categoria.Entity;
				if (((previousValue != value) 
							|| (this._Categoria.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Categoria.Entity = null;
						previousValue.SubCategorias.Remove(this);
					}
					this._Categoria.Entity = value;
					if ((value != null))
					{
						value.SubCategorias.Add(this);
						this._CategoriaID = value.CategoriaID;
					}
					else
					{
						this._CategoriaID = default(int);
					}
					this.SendPropertyChanged("Categoria");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Productos(Producto entity)
		{
			this.SendPropertyChanging();
			entity.SubCategoria = this;
		}
		
		private void detach_Productos(Producto entity)
		{
			this.SendPropertyChanging();
			entity.SubCategoria = null;
		}
		
		private void attach_SubCategoria_Propiedads(SubCategoria_Propiedad entity)
		{
			this.SendPropertyChanging();
			entity.SubCategoria = this;
		}
		
		private void detach_SubCategoria_Propiedads(SubCategoria_Propiedad entity)
		{
			this.SendPropertyChanging();
			entity.SubCategoria = null;
		}
	}
	
	[Table(Name="dbo.SubCategoria_Propiedad")]
	public partial class SubCategoria_Propiedad : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubCategoriaID;
		
		private int _PropiedadID;
		
		private char _IsIdentificador;
		
		private EntityRef<Propiedad> _Propiedad;
		
		private EntityRef<SubCategoria> _SubCategoria;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubCategoriaIDChanging(int value);
    partial void OnSubCategoriaIDChanged();
    partial void OnPropiedadIDChanging(int value);
    partial void OnPropiedadIDChanged();
    partial void OnIsIdentificadorChanging(char value);
    partial void OnIsIdentificadorChanged();
    #endregion
		
		public SubCategoria_Propiedad()
		{
			this._Propiedad = default(EntityRef<Propiedad>);
			this._SubCategoria = default(EntityRef<SubCategoria>);
			OnCreated();
		}
		
		[Column(Storage="_SubCategoriaID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SubCategoriaID
		{
			get
			{
				return this._SubCategoriaID;
			}
			set
			{
				if ((this._SubCategoriaID != value))
				{
					if (this._SubCategoria.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubCategoriaIDChanging(value);
					this.SendPropertyChanging();
					this._SubCategoriaID = value;
					this.SendPropertyChanged("SubCategoriaID");
					this.OnSubCategoriaIDChanged();
				}
			}
		}
		
		[Column(Storage="_PropiedadID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PropiedadID
		{
			get
			{
				return this._PropiedadID;
			}
			set
			{
				if ((this._PropiedadID != value))
				{
					if (this._Propiedad.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPropiedadIDChanging(value);
					this.SendPropertyChanging();
					this._PropiedadID = value;
					this.SendPropertyChanged("PropiedadID");
					this.OnPropiedadIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsIdentificador", DbType="VarChar(1) NOT NULL")]
		public char IsIdentificador
		{
			get
			{
				return this._IsIdentificador;
			}
			set
			{
				if ((this._IsIdentificador != value))
				{
					this.OnIsIdentificadorChanging(value);
					this.SendPropertyChanging();
					this._IsIdentificador = value;
					this.SendPropertyChanged("IsIdentificador");
					this.OnIsIdentificadorChanged();
				}
			}
		}
		
		[Association(Name="Propiedad_SubCategoria_Propiedad", Storage="_Propiedad", ThisKey="PropiedadID", OtherKey="PropiedadID", IsForeignKey=true)]
		public Propiedad Propiedad
		{
			get
			{
				return this._Propiedad.Entity;
			}
			set
			{
				Propiedad previousValue = this._Propiedad.Entity;
				if (((previousValue != value) 
							|| (this._Propiedad.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Propiedad.Entity = null;
						previousValue.SubCategoria_Propiedads.Remove(this);
					}
					this._Propiedad.Entity = value;
					if ((value != null))
					{
						value.SubCategoria_Propiedads.Add(this);
						this._PropiedadID = value.PropiedadID;
					}
					else
					{
						this._PropiedadID = default(int);
					}
					this.SendPropertyChanged("Propiedad");
				}
			}
		}
		
		[Association(Name="SubCategoria_SubCategoria_Propiedad", Storage="_SubCategoria", ThisKey="SubCategoriaID", OtherKey="SubCategoriaID", IsForeignKey=true)]
		public SubCategoria SubCategoria
		{
			get
			{
				return this._SubCategoria.Entity;
			}
			set
			{
				SubCategoria previousValue = this._SubCategoria.Entity;
				if (((previousValue != value) 
							|| (this._SubCategoria.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubCategoria.Entity = null;
						previousValue.SubCategoria_Propiedads.Remove(this);
					}
					this._SubCategoria.Entity = value;
					if ((value != null))
					{
						value.SubCategoria_Propiedads.Add(this);
						this._SubCategoriaID = value.SubCategoriaID;
					}
					else
					{
						this._SubCategoriaID = default(int);
					}
					this.SendPropertyChanged("SubCategoria");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Sucursal")]
	public partial class Sucursal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SucursalID;
		
		private string _Nombre;
		
		private string _Direccion;
		
		private double _Latitud;
		
		private double _Longitud;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSucursalIDChanging(int value);
    partial void OnSucursalIDChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnDireccionChanging(string value);
    partial void OnDireccionChanged();
    partial void OnLatitudChanging(double value);
    partial void OnLatitudChanged();
    partial void OnLongitudChanging(double value);
    partial void OnLongitudChanged();
    #endregion
		
		public Sucursal()
		{
			OnCreated();
		}
		
		[Column(Storage="_SucursalID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SucursalID
		{
			get
			{
				return this._SucursalID;
			}
			set
			{
				if ((this._SucursalID != value))
				{
					this.OnSucursalIDChanging(value);
					this.SendPropertyChanging();
					this._SucursalID = value;
					this.SendPropertyChanged("SucursalID");
					this.OnSucursalIDChanged();
				}
			}
		}
		
		[Column(Storage="_Nombre", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[Column(Storage="_Direccion", DbType="VarChar(80) NOT NULL", CanBeNull=false)]
		public string Direccion
		{
			get
			{
				return this._Direccion;
			}
			set
			{
				if ((this._Direccion != value))
				{
					this.OnDireccionChanging(value);
					this.SendPropertyChanging();
					this._Direccion = value;
					this.SendPropertyChanged("Direccion");
					this.OnDireccionChanged();
				}
			}
		}
		
		[Column(Storage="_Latitud", DbType="Float NOT NULL")]
		public double Latitud
		{
			get
			{
				return this._Latitud;
			}
			set
			{
				if ((this._Latitud != value))
				{
					this.OnLatitudChanging(value);
					this.SendPropertyChanging();
					this._Latitud = value;
					this.SendPropertyChanged("Latitud");
					this.OnLatitudChanged();
				}
			}
		}
		
		[Column(Storage="_Longitud", DbType="Float NOT NULL")]
		public double Longitud
		{
			get
			{
				return this._Longitud;
			}
			set
			{
				if ((this._Longitud != value))
				{
					this.OnLongitudChanging(value);
					this.SendPropertyChanging();
					this._Longitud = value;
					this.SendPropertyChanged("Longitud");
					this.OnLongitudChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Tag")]
	public partial class Tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TagID;
		
		private string _Nombre;
		
		private int _CantAp;
		
		private EntitySet<Producto_Tag> _Producto_Tags;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTagIDChanging(int value);
    partial void OnTagIDChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnCantApChanging(int value);
    partial void OnCantApChanged();
    #endregion
		
		public Tag()
		{
			this._Producto_Tags = new EntitySet<Producto_Tag>(new Action<Producto_Tag>(this.attach_Producto_Tags), new Action<Producto_Tag>(this.detach_Producto_Tags));
			OnCreated();
		}
		
		[Column(Storage="_TagID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TagID
		{
			get
			{
				return this._TagID;
			}
			set
			{
				if ((this._TagID != value))
				{
					this.OnTagIDChanging(value);
					this.SendPropertyChanging();
					this._TagID = value;
					this.SendPropertyChanged("TagID");
					this.OnTagIDChanged();
				}
			}
		}
		
		[Column(Storage="_Nombre", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[Column(Storage="_CantAp", DbType="Int NOT NULL")]
		public int CantAp
		{
			get
			{
				return this._CantAp;
			}
			set
			{
				if ((this._CantAp != value))
				{
					this.OnCantApChanging(value);
					this.SendPropertyChanging();
					this._CantAp = value;
					this.SendPropertyChanged("CantAp");
					this.OnCantApChanged();
				}
			}
		}
		
		[Association(Name="Tag_Producto_Tag", Storage="_Producto_Tags", ThisKey="TagID", OtherKey="TagID")]
		public EntitySet<Producto_Tag> Producto_Tags
		{
			get
			{
				return this._Producto_Tags;
			}
			set
			{
				this._Producto_Tags.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Producto_Tags(Producto_Tag entity)
		{
			this.SendPropertyChanging();
			entity.Tag = this;
		}
		
		private void detach_Producto_Tags(Producto_Tag entity)
		{
			this.SendPropertyChanging();
			entity.Tag = null;
		}
	}
	
	[Table(Name="dbo.Tienda")]
	public partial class Tienda : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TiendaID;
		
		private string _Nombre;
		
		private string _Url;
		
		private string _TipoAPI;
		
		private EntitySet<Producto> _Productos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTiendaIDChanging(int value);
    partial void OnTiendaIDChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnTipoAPIChanging(string value);
    partial void OnTipoAPIChanged();
    #endregion
		
		public Tienda()
		{
			this._Productos = new EntitySet<Producto>(new Action<Producto>(this.attach_Productos), new Action<Producto>(this.detach_Productos));
			OnCreated();
		}
		
		[Column(Storage="_TiendaID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TiendaID
		{
			get
			{
				return this._TiendaID;
			}
			set
			{
				if ((this._TiendaID != value))
				{
					this.OnTiendaIDChanging(value);
					this.SendPropertyChanging();
					this._TiendaID = value;
					this.SendPropertyChanged("TiendaID");
					this.OnTiendaIDChanged();
				}
			}
		}
		
		[Column(Storage="_Nombre", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[Column(Storage="_Url", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[Column(Storage="_TipoAPI", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TipoAPI
		{
			get
			{
				return this._TipoAPI;
			}
			set
			{
				if ((this._TipoAPI != value))
				{
					this.OnTipoAPIChanging(value);
					this.SendPropertyChanging();
					this._TipoAPI = value;
					this.SendPropertyChanged("TipoAPI");
					this.OnTipoAPIChanged();
				}
			}
		}
		
		[Association(Name="Tienda_Producto", Storage="_Productos", ThisKey="TiendaID", OtherKey="TiendaID")]
		public EntitySet<Producto> Productos
		{
			get
			{
				return this._Productos;
			}
			set
			{
				this._Productos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Productos(Producto entity)
		{
			this.SendPropertyChanging();
			entity.Tienda = this;
		}
		
		private void detach_Productos(Producto entity)
		{
			this.SendPropertyChanging();
			entity.Tienda = null;
		}
	}
	
	[Table(Name="dbo.Usuario")]
	public partial class Usuario : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UsuarioID;
		
		private string _Nombre;
		
		private EntitySet<Carrito> _Carritos;
		
		private EntitySet<MetodoDePago> _MetodoDePagos;
		
		private EntitySet<Producto_Tag> _Producto_Tags;
		
		private EntitySet<Producto_Usuario> _Producto_Usuarios;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsuarioIDChanging(int value);
    partial void OnUsuarioIDChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    #endregion
		
		public Usuario()
		{
			this._Carritos = new EntitySet<Carrito>(new Action<Carrito>(this.attach_Carritos), new Action<Carrito>(this.detach_Carritos));
			this._MetodoDePagos = new EntitySet<MetodoDePago>(new Action<MetodoDePago>(this.attach_MetodoDePagos), new Action<MetodoDePago>(this.detach_MetodoDePagos));
			this._Producto_Tags = new EntitySet<Producto_Tag>(new Action<Producto_Tag>(this.attach_Producto_Tags), new Action<Producto_Tag>(this.detach_Producto_Tags));
			this._Producto_Usuarios = new EntitySet<Producto_Usuario>(new Action<Producto_Usuario>(this.attach_Producto_Usuarios), new Action<Producto_Usuario>(this.detach_Producto_Usuarios));
			OnCreated();
		}
		
		[Column(Storage="_UsuarioID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UsuarioID
		{
			get
			{
				return this._UsuarioID;
			}
			set
			{
				if ((this._UsuarioID != value))
				{
					this.OnUsuarioIDChanging(value);
					this.SendPropertyChanging();
					this._UsuarioID = value;
					this.SendPropertyChanged("UsuarioID");
					this.OnUsuarioIDChanged();
				}
			}
		}
		
		[Column(Storage="_Nombre", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[Association(Name="Usuario_Carrito", Storage="_Carritos", ThisKey="UsuarioID", OtherKey="UsuarioID")]
		public EntitySet<Carrito> Carritos
		{
			get
			{
				return this._Carritos;
			}
			set
			{
				this._Carritos.Assign(value);
			}
		}
		
		[Association(Name="Usuario_MetodoDePago", Storage="_MetodoDePagos", ThisKey="UsuarioID", OtherKey="UsuarioID")]
		public EntitySet<MetodoDePago> MetodoDePagos
		{
			get
			{
				return this._MetodoDePagos;
			}
			set
			{
				this._MetodoDePagos.Assign(value);
			}
		}
		
		[Association(Name="Usuario_Producto_Tag", Storage="_Producto_Tags", ThisKey="UsuarioID", OtherKey="UsuarioID")]
		public EntitySet<Producto_Tag> Producto_Tags
		{
			get
			{
				return this._Producto_Tags;
			}
			set
			{
				this._Producto_Tags.Assign(value);
			}
		}
		
		[Association(Name="Usuario_Producto_Usuario", Storage="_Producto_Usuarios", ThisKey="UsuarioID", OtherKey="UsuarioID")]
		public EntitySet<Producto_Usuario> Producto_Usuarios
		{
			get
			{
				return this._Producto_Usuarios;
			}
			set
			{
				this._Producto_Usuarios.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Carritos(Carrito entity)
		{
			this.SendPropertyChanging();
			entity.Usuario = this;
		}
		
		private void detach_Carritos(Carrito entity)
		{
			this.SendPropertyChanging();
			entity.Usuario = null;
		}
		
		private void attach_MetodoDePagos(MetodoDePago entity)
		{
			this.SendPropertyChanging();
			entity.Usuario = this;
		}
		
		private void detach_MetodoDePagos(MetodoDePago entity)
		{
			this.SendPropertyChanging();
			entity.Usuario = null;
		}
		
		private void attach_Producto_Tags(Producto_Tag entity)
		{
			this.SendPropertyChanging();
			entity.Usuario = this;
		}
		
		private void detach_Producto_Tags(Producto_Tag entity)
		{
			this.SendPropertyChanging();
			entity.Usuario = null;
		}
		
		private void attach_Producto_Usuarios(Producto_Usuario entity)
		{
			this.SendPropertyChanging();
			entity.Usuario = this;
		}
		
		private void detach_Producto_Usuarios(Producto_Usuario entity)
		{
			this.SendPropertyChanging();
			entity.Usuario = null;
		}
	}
	
	[Table(Name="dbo.Valor")]
	public partial class Valor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductoID;
		
		private int _PropiedadID;
		
		private string _Valor1;
		
		private EntityRef<Propiedad> _Propiedad;
		
		private EntityRef<Producto> _Producto;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductoIDChanging(int value);
    partial void OnProductoIDChanged();
    partial void OnPropiedadIDChanging(int value);
    partial void OnPropiedadIDChanged();
    partial void OnValor1Changing(string value);
    partial void OnValor1Changed();
    #endregion
		
		public Valor()
		{
			this._Propiedad = default(EntityRef<Propiedad>);
			this._Producto = default(EntityRef<Producto>);
			OnCreated();
		}
		
		[Column(Storage="_ProductoID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductoID
		{
			get
			{
				return this._ProductoID;
			}
			set
			{
				if ((this._ProductoID != value))
				{
					if (this._Producto.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductoIDChanging(value);
					this.SendPropertyChanging();
					this._ProductoID = value;
					this.SendPropertyChanged("ProductoID");
					this.OnProductoIDChanged();
				}
			}
		}
		
		[Column(Storage="_PropiedadID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PropiedadID
		{
			get
			{
				return this._PropiedadID;
			}
			set
			{
				if ((this._PropiedadID != value))
				{
					if (this._Propiedad.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPropiedadIDChanging(value);
					this.SendPropertyChanging();
					this._PropiedadID = value;
					this.SendPropertyChanged("PropiedadID");
					this.OnPropiedadIDChanged();
				}
			}
		}
		
		[Column(Name="Valor", Storage="_Valor1", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string Valor1
		{
			get
			{
				return this._Valor1;
			}
			set
			{
				if ((this._Valor1 != value))
				{
					this.OnValor1Changing(value);
					this.SendPropertyChanging();
					this._Valor1 = value;
					this.SendPropertyChanged("Valor1");
					this.OnValor1Changed();
				}
			}
		}
		
		[Association(Name="Propiedad_Valor", Storage="_Propiedad", ThisKey="PropiedadID", OtherKey="PropiedadID", IsForeignKey=true)]
		public Propiedad Propiedad
		{
			get
			{
				return this._Propiedad.Entity;
			}
			set
			{
				Propiedad previousValue = this._Propiedad.Entity;
				if (((previousValue != value) 
							|| (this._Propiedad.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Propiedad.Entity = null;
						previousValue.Valors.Remove(this);
					}
					this._Propiedad.Entity = value;
					if ((value != null))
					{
						value.Valors.Add(this);
						this._PropiedadID = value.PropiedadID;
					}
					else
					{
						this._PropiedadID = default(int);
					}
					this.SendPropertyChanged("Propiedad");
				}
			}
		}
		
		[Association(Name="Producto_Valor", Storage="_Producto", ThisKey="ProductoID", OtherKey="ProductoID", IsForeignKey=true)]
		public Producto Producto
		{
			get
			{
				return this._Producto.Entity;
			}
			set
			{
				Producto previousValue = this._Producto.Entity;
				if (((previousValue != value) 
							|| (this._Producto.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Producto.Entity = null;
						previousValue.Valors.Remove(this);
					}
					this._Producto.Entity = value;
					if ((value != null))
					{
						value.Valors.Add(this);
						this._ProductoID = value.ProductoID;
					}
					else
					{
						this._ProductoID = default(int);
					}
					this.SendPropertyChanged("Producto");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
